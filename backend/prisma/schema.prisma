// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// yarn prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  refreshTokens RefreshToken[]

  confirmHash  String?         @default("")
  resetHash    String?         @default("")
  emailConfirmed  Boolean         @default(false)
  confirmHashCreated  DateTime?
  resetHashCreated  DateTime?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  avatar        String         @default("")
  phone         Int            @default(0)
  telegram      String         @default("")
  studentProfile StudentProfile?
  employerProfile EmployerProfile?
}

model StudentProfile {
  id          Int      @id @unique @default(autoincrement())
  userId      Int      @unique
  lastName    String   @default("")
  firstName   String   @default("")
  patronymic  String   @default("")
  skills      String   @default("")
  interests   String   @default("")
  isWorkSearch Boolean @default(false)
  salary      Int      @default(0)

  avgMark     Float      @default(0)
  science     Int      @default(0)
  study       Int      @default(0)
  community   Int      @default(0)
  culture     Int      @default(0)
  project     Int      @default(0)
  sport       Int      @default(0)
  total       Int      @default(0)

  user        User     @relation(fields: [userId], references: [id])
  portfolio   PortfolioDocument[]
  educations  StudentEducation[]
  eduPortfolios   PortfolioEdu[]
  offer       Offer[]
}

model StudentEducation {
    id     Int      @id @unique @default(autoincrement())
    name   String
    specialization String
    faculty String
    period  String
    studentId Int
    student StudentProfile @relation(fields: [studentId], references: [id])
}

model Offer {
    id         Int              @id @unique @default(autoincrement())
    confirmed  Boolean          @default(false)
    type       Int              @default(0)
    employerId Int
    employer   EmployerProfile  @relation(fields: [employerId], references: [id])
    studentId  Int
    student    StudentProfile   @relation(fields: [studentId], references: [id])
}

model PortfolioDocument {
  id     Int      @id @unique @default(autoincrement())
  type   String
  name   String
  description   String
  studentId Int
  student StudentProfile @relation(fields: [studentId], references: [id])
  portfolioFile PortfolioFile[]
}

model PortfolioEdu {
  id     Int      @id @unique @default(autoincrement())
  ballOfWork   Int
  category   String
  description   String?
  typeName  String
  name String?
  ekAnotation String?
  ekTarget String?
  keywords String?

  studentId Int
  student StudentProfile @relation(fields: [studentId], references: [id])
}

model PortfolioFile {
  id     Int      @id @unique @default(autoincrement())
  url   String
  size  Int       @default(1)
  mimeType String
  portfolioDocumentId Int
  portfolioDocument PortfolioDocument @relation(fields: [portfolioDocumentId], references: [id])
}

model EmployerProfile {
  id     Int      @id @unique @default(autoincrement())
  userId Int      @unique
  balance Int     @default(0)
  companyName String @default("")
  companyAddress String @default("")
  inn     String     @default("111111111")
  // Добавьте поля, специфичные для работодателей
  // Например: название компании, отрасль и др.
  user   User     @relation(fields: [userId], references: [id])
  payment PaymentAction[]
  offer       Offer[]
}

enum TransactionType {
    DEPOSIT
    SUBSCRIPTION_PAYMENT
    STUDENT_PAYMENT
}

model PaymentAction {
    id     Int      @id @unique @default(autoincrement())
    value  Int
    type   String
    //studentId Int
    //student StudentProfile @relation(fields: [studentId], references: [id])
    createdAt     DateTime       @default(now())
    employerId Int
    employer EmployerProfile @relation(fields: [employerId], references: [id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
